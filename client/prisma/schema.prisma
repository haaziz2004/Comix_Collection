// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  role               UserRole            @default(USER)
  personalCollection PersonalCollection?

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Comic {
  id                  Int                  @id @default(autoincrement())
  publisher           String
  seriesTitle         String
  volumeNumber        String               @db.VarChar(40)
  issueNumber         String               @db.VarChar(10)
  publicationDate     String               @db.VarChar(20)
  storyTitle          String?              @db.VarChar(255)
  creators            Creator[]
  principleCharacters Character[]
  personalCollections PersonalCollection[]
  description         String?
  value               Float?

  @@unique([publisher, seriesTitle, volumeNumber, issueNumber, publicationDate])
  @@map("comics")
}

model Creator {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  comics Comic[]

  @@map("creators")
}

model Character {
  id     Int     @id @default(autoincrement())
  name   String
  comics Comic[]

  @@map("characters")
}

model PersonalCollection {
  id     Int     @id @default(autoincrement())
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comics Comic[]

  @@map("personal_collections")
}
